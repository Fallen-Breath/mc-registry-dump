import com.replaymod.gradle.preprocess.Node
import groovy.json.JsonSlurper

plugins {
	id 'maven-publish'
	id 'com.github.hierynomus.license' version '0.16.1' apply false
	id 'fabric-loom' version '1.11-SNAPSHOT' apply false

	// https://github.com/ReplayMod/preprocessor
	// https://github.com/Fallen-Breath/preprocessor
	id 'com.replaymod.preprocess' version 'd452ef7612'

	// https://github.com/Fallen-Breath/yamlang
	id 'me.fallenbreath.yamlang' version '1.5.0' apply false
}

def settings = new JsonSlurper().parseText(file('settings.json').text)

preprocess {
    strictExtraMappings = false

	Node prevNode = null
	for (String version : new ArrayList<>(settings.versions).toSorted()) {
		String[] parts = version.split("\\.")
		if (parts.size() == 2) {
			parts = [parts[0], parts[1], "0"]
		}
		int versionId = Integer.parseInt(parts[0]) * 10000 + Integer.parseInt(parts[1]) * 100 + Integer.parseInt(parts[2])
		Node node = createNode(version, versionId, '')
		if (prevNode != null) {
			def mappingFile = rootProject.file("versions/mapping-${prevNode.project}-${version}.txt")
			prevNode.link(node, mappingFile.isFile() ? mappingFile : null)
		}
		prevNode = node
	}
}

tasks.register('buildAndGather') {
	subprojects {
		dependsOn project.tasks.named('build').get()
	}
	doFirst {
		println 'Gathering builds'
		def buildLibs = {
			p -> p.buildDir.toPath().resolve('libs')
		}
		delete fileTree(buildLibs(rootProject)) {
			include '*'
		}
		subprojects {
			copy {
				from(buildLibs(project)) {
					include '*.jar'
					exclude '*-dev.jar', '*-sources.jar', '*-shadow.jar'
				}
				into buildLibs(rootProject)
				duplicatesStrategy = DuplicatesStrategy.INCLUDE
			}
		}
	}
}
